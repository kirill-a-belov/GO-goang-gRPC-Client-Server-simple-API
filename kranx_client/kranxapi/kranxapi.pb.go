// Code generated by protoc-gen-go.
// source: kranxapi.proto
// DO NOT EDIT!

/*
Package kranx_rpc is a generated protocol buffer package.

It is generated from these files:
	kranxapi.proto

It has these top-level messages:
	AddRequest
	AddResponse
	GetRequest
	GetResponse
	DelRequest
	DelResponse
*/
package kranx_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Добавляем ключи
type AddRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AddRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type AddResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *AddResponse) Reset()                    { *m = AddResponse{} }
func (m *AddResponse) String() string            { return proto.CompactTextString(m) }
func (*AddResponse) ProtoMessage()               {}
func (*AddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Получаем ключи
type GetRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Удаляем ключи
type DelRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *DelRequest) Reset()                    { *m = DelRequest{} }
func (m *DelRequest) String() string            { return proto.CompactTextString(m) }
func (*DelRequest) ProtoMessage()               {}
func (*DelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DelRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DelResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *DelResponse) Reset()                    { *m = DelResponse{} }
func (m *DelResponse) String() string            { return proto.CompactTextString(m) }
func (*DelResponse) ProtoMessage()               {}
func (*DelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DelResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*AddRequest)(nil), "kranx_rpc.AddRequest")
	proto.RegisterType((*AddResponse)(nil), "kranx_rpc.AddResponse")
	proto.RegisterType((*GetRequest)(nil), "kranx_rpc.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "kranx_rpc.GetResponse")
	proto.RegisterType((*DelRequest)(nil), "kranx_rpc.DelRequest")
	proto.RegisterType((*DelResponse)(nil), "kranx_rpc.DelResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KranxApi service

type KranxApiClient interface {
	AddData(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	GetData(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	DelData(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
}

type kranxApiClient struct {
	cc *grpc.ClientConn
}

func NewKranxApiClient(cc *grpc.ClientConn) KranxApiClient {
	return &kranxApiClient{cc}
}

func (c *kranxApiClient) AddData(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := grpc.Invoke(ctx, "/kranx_rpc.KranxApi/AddData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kranxApiClient) GetData(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/kranx_rpc.KranxApi/GetData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kranxApiClient) DelData(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := grpc.Invoke(ctx, "/kranx_rpc.KranxApi/DelData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KranxApi service

type KranxApiServer interface {
	AddData(context.Context, *AddRequest) (*AddResponse, error)
	GetData(context.Context, *GetRequest) (*GetResponse, error)
	DelData(context.Context, *DelRequest) (*DelResponse, error)
}

func RegisterKranxApiServer(s *grpc.Server, srv KranxApiServer) {
	s.RegisterService(&_KranxApi_serviceDesc, srv)
}

func _KranxApi_AddData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KranxApiServer).AddData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kranx_rpc.KranxApi/AddData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KranxApiServer).AddData(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KranxApi_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KranxApiServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kranx_rpc.KranxApi/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KranxApiServer).GetData(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KranxApi_DelData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KranxApiServer).DelData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kranx_rpc.KranxApi/DelData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KranxApiServer).DelData(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KranxApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kranx_rpc.KranxApi",
	HandlerType: (*KranxApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddData",
			Handler:    _KranxApi_AddData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _KranxApi_GetData_Handler,
		},
		{
			MethodName: "DelData",
			Handler:    _KranxApi_DelData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kranxapi.proto",
}

func init() { proto.RegisterFile("kranxapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x2e, 0x4a, 0xcc,
	0xab, 0x48, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0xf3, 0xe3, 0x8b,
	0x0a, 0x92, 0x95, 0x4c, 0xb8, 0xb8, 0x1c, 0x53, 0x52, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c,
	0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x26, 0xb0, 0x18, 0x84, 0xa3, 0xa4,
	0xce, 0xc5, 0x0d, 0xd6, 0x55, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24, 0xc1, 0xc5, 0x9e, 0x9b,
	0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x0a, 0xd5, 0x0a, 0xe3, 0x2a, 0xc9, 0x71, 0x71, 0xb9, 0xa7, 0x96,
	0xe0, 0x34, 0x5e, 0x49, 0x99, 0x8b, 0x1b, 0x2c, 0x0f, 0x35, 0x08, 0x6e, 0x1b, 0x23, 0xb2, 0x6d,
	0x72, 0x5c, 0x5c, 0x2e, 0xa9, 0x39, 0xb8, 0x0d, 0x51, 0xe7, 0xe2, 0x06, 0xcb, 0x13, 0x72, 0x8d,
	0xd1, 0x3e, 0x46, 0x2e, 0x0e, 0x6f, 0x90, 0xd7, 0x1d, 0x0b, 0x32, 0x85, 0xac, 0xb8, 0xd8, 0x1d,
	0x53, 0x52, 0x5c, 0x12, 0x4b, 0x12, 0x85, 0x44, 0xf5, 0xe0, 0x01, 0xa2, 0x87, 0x08, 0x0d, 0x29,
	0x31, 0x74, 0x61, 0x88, 0x05, 0x4a, 0x0c, 0x20, 0xbd, 0xee, 0xa9, 0x25, 0x18, 0x7a, 0x11, 0x5e,
	0x45, 0xd1, 0x8b, 0xe4, 0x43, 0x88, 0x5e, 0x97, 0xd4, 0x1c, 0x0c, 0xbd, 0x08, 0x1f, 0xa2, 0xe8,
	0x45, 0xf2, 0x98, 0x12, 0x43, 0x12, 0x1b, 0x38, 0xfe, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x5b, 0x2e, 0x9c, 0xc6, 0xd1, 0x01, 0x00, 0x00,
}
